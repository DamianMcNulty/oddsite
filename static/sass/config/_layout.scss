// Layout Config
// =============


// Variables
// Reusable CSS Grid Template Columns definition
// ---------------------------------------------
$grid-columns: [col1-start] 1fr [col1-end col2-start] 1fr [col2-end col3-start] minmax(auto, size('full-content')) [col3-end col4-start] 1fr [col4-end col5-start] 1fr [col5-end];
$grid-columns-large: [col1-start] minmax(10vw, 1fr) [col1-end col2-start] minmax(10vw, 1fr) [col2-end col3-start] size('full-content') [col3-end col4-start] minmax(10vw, 1fr) [col4-end col5-start] minmax(10vw, 1fr) [col5-end];

// When you need a % and not a rem, like on blockquote and intro
// -------------------------------------------------------------
$wide-column: 90%;


// Center it (horizontally)
// ------------------------
/// Shortcut for l/r auto margins with optional max-width
/// @group layout
/// @parameter $max-width -
///   Optional max-width for centered item
/// @example scss -
///   .foo {
///     @include center('full-content');
///   }
/// @example css -
///   .foo {
///     margin-left: auto;
///     margin-right: auto;
///   }
@mixin center(
  $max-width: null
) {
  margin-left: auto;
  margin-right: auto;

  @if ($max-width) {
    max-width: size($max-width);
    width: 100%;
  }
}


// Grid Container
// --------------
/// Shortcut for declaring shared grid container styles
/// @group layout
/// @example scss -
///   .foo {
///     @include grid;
///   }
/// @example css -
///   .foo {
///     @supports (display: grid) {
///       display: grid;
///       grid-template-columns: $grid-columns;
///     }
///   }
@mixin grid {
  @supports (display: grid) {
    display: grid;
    grid-template-columns: $grid-columns;
  }
}


// Extend things past their container

// Margin/Size Extension Variables
// ===============================
// Extend thing outside its container on both sides
// viewport, minus the main content width, divided by 2, then make negative
/// @link http://codepen.io/mirisuzanne/pen/ded4ae1f55f9b24b2aa0ea4aaac71e47?editors=0100
/// @link http://www.sassmeister.com/gist/8374287846277fdf3361537dfaac27a8

$full-content: 40rem;
$extend-small: 70vw;
$extend-medium: 80vw;
$extend-large: 90vw;
$extend-full: 100vw;

@mixin extend(
  $extend-base-size
) {

  $extend-large-size: $extend-base-size - 10vw;

  @if ($extend-base-size == $extend-full) {
    @media (min-width: 'medium-page') {
      margin-left: calc((#{$extend-full} - #{$full-content}) / 2 * -1);
      margin-right: calc((#{$extend-full} - #{$full-content}) / 2 * -1);
      max-width: $extend-full;
      width: $extend-full;
    }
  } @else {
    @media (min-width: 'medium-page') {
      margin-left: calc((#{$extend-base-size} - #{$full-content}) / 2 * -1);
      margin-right: calc((#{$extend-base-size} - #{$full-content}) / 2 * -1);
      max-width: $extend-base-size;
      width: $extend-base-size;
    }

    @media (min-width: 'large-page') {
      margin-left: calc((#{$extend-large-size} - #{$full-content}) / 2 * -1);
      margin-right: calc((#{$extend-large-size} - #{$full-content}) / 2 * -1);
      max-width: $extend-large-size;
      width: $extend-large-size;
    }
  }
}

// Extend thing outside its container on one side only
@mixin extend-side(
  $side
) {

  @if ($side == left) {
    float: left;
    margin-bottom: size('pad');
    padding-right: size('pad');

    @media (min-width: 'medium-page') {
      margin-left: calc((#{$extend-medium} - #{$full-content}) / 2 * -1);
    }

    @media (min-width: 'large-page') {
      margin-left: calc((#{$extend-small} - #{$full-content}) / 2 * -1);
    }
  }

  @elseif ($side == right) {
    float: right;
    margin-bottom: size('pad');
    padding-left: size('pad');

    @media (min-width: 'medium-page') {
      margin-right: calc((#{$extend-medium} - #{$full-content}) / 2 * -1);
    }

    @media (min-width: 'large-page') {
      margin-right: calc((#{$extend-small} - #{$full-content}) / 2 * -1);
    }
  }
}

